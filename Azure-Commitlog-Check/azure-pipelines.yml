trigger:
  branches:
    include:
    - main
    - develop
    - feature/*
    - release/*
    - hotfix/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'
        
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'
        
    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'
        
    - task: DotNetCoreCLI@2
      displayName: 'Publish Azure Commitlog Check'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/AzureCommitlogCheck.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/CommitlogCheck'
        zipAfterPublish: true
        
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Azure Commitlog Check artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/CommitlogCheck'
        artifact: 'AzureCommitlogCheck'

- stage: CheckPR
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: ValidateCommitMessage
    steps:
    - checkout: self
      fetchDepth: 0  # 完整检出所有历史记录，确保自动检测功能有足够的Git历史信息
      
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'AzureCommitlogCheck'
        path: '$(Pipeline.Workspace)/AzureCommitlogCheck'
        
    - task: PowerShell@2
      displayName: 'Check PR Commit Message'
      inputs:
        targetType: 'inline'
        script: |
          $token = "$(System.AccessToken)"
          $organization = "$(System.TeamFoundationCollectionUri)"
          $project = "$(System.TeamProject)"
          $repository = "$(Build.Repository.Name)"
          
          Write-Host "检查PR commit message是否符合规范标准"
          
          $toolPath = "$(Pipeline.Workspace)/AzureCommitlogCheck/AzureCommitlogCheck.zip"
          Expand-Archive -Path $toolPath -DestinationPath "$(Pipeline.Workspace)/CommitlogCheckTool" -Force
          
          # 使用自动检测功能
          $result = & "$(Pipeline.Workspace)/CommitlogCheckTool/AzureCommitlogCheck.exe" --url "$organization" --token "$token" --project "$project" --auto-detect --repository "$repository"
          
          Write-Host $result
          
          # 根据退出代码处理结果
          $exitCode = $LASTEXITCODE
          switch ($exitCode) {
              0 { 
                  Write-Host "Commit message 符合规范标准"
              }
              1 { 
                  Write-Host "##vso[task.logissue type=error]PR commit message 不符合规范标准"
                  Write-Host "##vso[task.complete result=Failed;]"
                  exit 1
              }
              2 { 
                  Write-Host "##vso[task.logissue type=error]找不到指定的PR"
                  Write-Host "##vso[task.complete result=Failed;]"
                  exit 1
              }
              3 { 
                  Write-Host "##vso[task.logissue type=warning]PR没有提交记录"
                  Write-Host "##vso[task.complete result=SucceededWithIssues;]"
              }
              4 { 
                  Write-Host "##vso[task.logissue type=error]访问Azure DevOps API时发生错误"
                  Write-Host "##vso[task.complete result=Failed;]"
                  exit 1
              }
              5 { 
                  Write-Host "##vso[task.logissue type=error]找不到Git命令"
                  Write-Host "##vso[task.complete result=Failed;]"
                  exit 1
              }
              6 { 
                  Write-Host "##vso[task.logissue type=error]没有为当前分支找到活跃的PR"
                  Write-Host "##vso[task.complete result=Failed;]"
                  exit 1
              }
              default { 
                  Write-Host "##vso[task.logissue type=error]未知错误，退出代码: $exitCode"
                  Write-Host "##vso[task.complete result=Failed;]"
                  exit 1
              }
          }
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
